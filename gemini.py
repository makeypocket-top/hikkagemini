# meta developer: @gemeguardian
# meta name: Gemini
# meta description: –ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—å—é Gemini –æ—Ç Google.
# meta version: 1.0.1
# meta license: GPLv3
# meta command: gm

import os
import google.generativeai as genai
from .. import loader, utils
from telethon.tl.types import Message

@loader.tds
class GeminiMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—å—é Gemini –æ—Ç Google."""
    strings = {
        "name": "Gemini",
        "no_api_key": "üö´ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á Google AI –≤ .config —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è.</b>",
        "processing": "‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</b>",
        "error": "üö´ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.</b>",
        "no_query": "üö´ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.</b>",
        "gemini_api_key": "–ö–ª—é—á API –¥–ª—è Google AI Gemini"
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "GEMINI_API_KEY",
                "YOUR_API_KEY",
                lambda: self.strings["gemini_api_key"],
                validator=loader.validators.String()
            ),
        )

    async def client_ready(self, client, db):
        self.client = client

    @loader.command(ru_doc="<–∑–∞–ø—Ä–æ—Å> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏ Gemini")
    async def gmcmd(self, message: Message):
        """<–∑–∞–ø—Ä–æ—Å> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏ Gemini"""
        api_key = self.config["GEMINI_API_KEY"]

        if api_key == "YOUR_API_KEY" or not api_key:
            await utils.answer(message, self.strings["no_api_key"])
            return

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_query"])
            return
        
        message = await utils.answer(message, self.strings["processing"])
        
        try:
            genai.configure(api_key=api_key)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
            generation_config = {
              "temperature": 0.9,
              "top_p": 1,
              "top_k": 1,
              "max_output_tokens": 2048,
            }

            safety_settings = [
              {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
              },
              {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
              },
              {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
              },
              {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
              },
            ]

            model = genai.GenerativeModel(model_name="gemini-pro",
                              generation_config=generation_config,
                              safety_settings=safety_settings)
            
            response = await utils.run_sync(model.generate_content, args)
            
            await utils.answer(message, response.text)

        except Exception as e:
            await utils.answer(message, f"{self.strings['error']}\n\n<code>{e}</code>")
